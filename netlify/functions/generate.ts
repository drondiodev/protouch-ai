import { GoogleGenAI, Modality } from "@google/genai";

// This function runs on Netlify's servers, not in the browser.
// It securely uses the API key from environment variables.

export const handler = async (event: any) => {
  // Only allow POST requests
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method Not Allowed' }),
    };
  }

  try {
    const { base64Image, mimeType, prompt } = JSON.parse(event.body || '{}');

    if (!base64Image || !mimeType || !prompt) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: 'Missing required parameters: base64Image, mimeType, prompt' }),
      };
    }

    if (!process.env.API_KEY) {
        return {
            statusCode: 500,
            body: JSON.stringify({ error: 'API key not configured on the server.' }),
        };
    }

    const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

    const imagePart = {
      inlineData: {
        data: base64Image,
        mimeType: mimeType,
      },
    };

    const textPart = {
      text: prompt,
    };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [imagePart, textPart],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    const generatedImagePart = response.candidates?.[0]?.content?.parts?.find(
      (part) => part.inlineData && part.inlineData.mimeType.startsWith('image/')
    );

    if (generatedImagePart?.inlineData) {
      const { data: base64Data, mimeType: generatedMimeType } = generatedImagePart.inlineData;
      return {
        statusCode: 200,
        body: JSON.stringify({ base64Data, mimeType: generatedMimeType }),
        headers: { 'Content-Type': 'application/json' },
      };
    } else {
       console.error("AI response did not contain an image.", JSON.stringify(response, null, 2));
      return {
        statusCode: 500,
        body: JSON.stringify({ error: 'No image was generated by the AI.' }),
      };
    }
  } catch (error) {
    console.error("Error in Netlify function:", error);
    const errorMessage = error instanceof Error ? error.message : "An unexpected error occurred.";
    return {
      statusCode: 500,
      body: JSON.stringify({ error: `Server error: ${errorMessage}` }),
    };
  }
};
