import { GoogleGenAI, Modality } from "@google/genai";

export const generateAiProfilePicture = async (base64Image: string, mimeType: string, prompt: string): Promise<string> => {
  try {
    const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

    const imagePart = {
      inlineData: {
        data: base64Image,
        mimeType: mimeType,
      },
    };

    const textPart = {
      text: prompt,
    };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [imagePart, textPart],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    if (response.candidates && response.candidates[0].content.parts[0].inlineData) {
      const generatedImagePart = response.candidates[0].content.parts.find(
        (part) => part.inlineData && part.inlineData.mimeType.startsWith('image/')
      );

      if (generatedImagePart && generatedImagePart.inlineData) {
        const base64Data = generatedImagePart.inlineData.data;
        const generatedMimeType = generatedImagePart.inlineData.mimeType;
        const dataUrl = `data:${generatedMimeType};base64,${base64Data}`;
        return dataUrl;
      }
    }
    
    console.error("AI response did not contain an image.", JSON.stringify(response));
    throw new Error("No image was generated by the AI.");

  } catch (error) {
    console.error("Error calling the Gemini API:", error);
    if (error instanceof Error) {
        throw new Error(`Failed to generate image: ${error.message}`);
    }
    throw new Error("An unexpected error occurred while generating the image.");
  }
};
